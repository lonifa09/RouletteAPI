// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RouletteAPI.Data;

namespace RouletteAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230113133629_AddIdentity")]
    partial class AddIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RouletteAPI.Data.Bet", b =>
                {
                    b.Property<int>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("TableSectionId")
                        .HasColumnType("int");

                    b.HasKey("BetId");

                    b.HasIndex("TableId");

                    b.HasIndex("TableSectionId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("RouletteAPI.Data.PayOut", b =>
                {
                    b.Property<int>("PayOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayOutDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PayOutId");

                    b.HasIndex("BetId");

                    b.ToTable("PayOuts");
                });

            modelBuilder.Entity("RouletteAPI.Data.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RouletteAPI.Data.Spin", b =>
                {
                    b.Property<int>("SpinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SpinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WheelId")
                        .HasColumnType("int");

                    b.HasKey("SpinId");

                    b.HasIndex("BetId");

                    b.HasIndex("WheelId");

                    b.ToTable("Spins");
                });

            modelBuilder.Entity("RouletteAPI.Data.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Polarity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Color = "Red",
                            Number = 1,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 2,
                            Color = "Black",
                            Number = 2,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 3,
                            Color = "Red",
                            Number = 3,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 4,
                            Color = "Black",
                            Number = 4,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 5,
                            Color = "Red",
                            Number = 5,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 6,
                            Color = "Black",
                            Number = 6,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 7,
                            Color = "Red",
                            Number = 7,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 8,
                            Color = "Black",
                            Number = 8,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 9,
                            Color = "Red",
                            Number = 9,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 10,
                            Color = "Black",
                            Number = 10,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 11,
                            Color = "Black",
                            Number = 11,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 12,
                            Color = "Red",
                            Number = 12,
                            Polarity = "",
                            Range = "1st 12"
                        },
                        new
                        {
                            TableId = 13,
                            Color = "Black",
                            Number = 13,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 14,
                            Color = "Red",
                            Number = 14,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 15,
                            Color = "Black",
                            Number = 15,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 16,
                            Color = "Red",
                            Number = 16,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 17,
                            Color = "Black",
                            Number = 17,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 18,
                            Color = "Red",
                            Number = 18,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 19,
                            Color = "Black",
                            Number = 19,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 20,
                            Color = "Black",
                            Number = 20,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 21,
                            Color = "Red",
                            Number = 21,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 22,
                            Color = "Black",
                            Number = 22,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 23,
                            Color = "Red",
                            Number = 23,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 24,
                            Color = "Black",
                            Number = 24,
                            Polarity = "",
                            Range = "2nd 12"
                        },
                        new
                        {
                            TableId = 25,
                            Color = "Red",
                            Number = 25,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 26,
                            Color = "Black",
                            Number = 26,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 27,
                            Color = "Red",
                            Number = 27,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 28,
                            Color = "Red",
                            Number = 28,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 29,
                            Color = "Black",
                            Number = 29,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 30,
                            Color = "Red",
                            Number = 30,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 31,
                            Color = "Black",
                            Number = 31,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 32,
                            Color = "Red",
                            Number = 32,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 33,
                            Color = "Black",
                            Number = 33,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 34,
                            Color = "Red",
                            Number = 34,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 35,
                            Color = "Black",
                            Number = 35,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 36,
                            Color = "Red",
                            Number = 36,
                            Polarity = "",
                            Range = "3rd 12"
                        },
                        new
                        {
                            TableId = 37,
                            Color = "Green",
                            Number = 0,
                            Polarity = "",
                            Range = ""
                        },
                        new
                        {
                            TableId = 38,
                            Color = "Green",
                            Number = 0,
                            Polarity = "",
                            Range = ""
                        });
                });

            modelBuilder.Entity("RouletteAPI.Data.TableSection", b =>
                {
                    b.Property<int>("TableSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableSectionId");

                    b.ToTable("TableSections");

                    b.HasData(
                        new
                        {
                            TableSectionId = 1,
                            Description = "1-18"
                        },
                        new
                        {
                            TableSectionId = 2,
                            Description = "Even"
                        },
                        new
                        {
                            TableSectionId = 3,
                            Description = "Red"
                        },
                        new
                        {
                            TableSectionId = 4,
                            Description = "Black"
                        },
                        new
                        {
                            TableSectionId = 5,
                            Description = "Odd"
                        },
                        new
                        {
                            TableSectionId = 6,
                            Description = "19-36"
                        });
                });

            modelBuilder.Entity("RouletteAPI.Data.Wheel", b =>
                {
                    b.Property<int>("WheelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("WheelId");

                    b.ToTable("Wheel");

                    b.HasData(
                        new
                        {
                            WheelId = 1,
                            Color = "Black",
                            Number = 1
                        },
                        new
                        {
                            WheelId = 2,
                            Color = "Red",
                            Number = 2
                        },
                        new
                        {
                            WheelId = 3,
                            Color = "Black",
                            Number = 3
                        },
                        new
                        {
                            WheelId = 4,
                            Color = "Red",
                            Number = 4
                        },
                        new
                        {
                            WheelId = 5,
                            Color = "Black",
                            Number = 5
                        },
                        new
                        {
                            WheelId = 6,
                            Color = "Red",
                            Number = 6
                        },
                        new
                        {
                            WheelId = 7,
                            Color = "Black",
                            Number = 7
                        },
                        new
                        {
                            WheelId = 8,
                            Color = "Red",
                            Number = 8
                        },
                        new
                        {
                            WheelId = 9,
                            Color = "Black",
                            Number = 9
                        },
                        new
                        {
                            WheelId = 10,
                            Color = "Red",
                            Number = 10
                        },
                        new
                        {
                            WheelId = 11,
                            Color = "Red",
                            Number = 11
                        },
                        new
                        {
                            WheelId = 12,
                            Color = "Black",
                            Number = 12
                        },
                        new
                        {
                            WheelId = 13,
                            Color = "Red",
                            Number = 13
                        },
                        new
                        {
                            WheelId = 14,
                            Color = "Black",
                            Number = 14
                        },
                        new
                        {
                            WheelId = 15,
                            Color = "Red",
                            Number = 15
                        },
                        new
                        {
                            WheelId = 16,
                            Color = "Black",
                            Number = 16
                        },
                        new
                        {
                            WheelId = 17,
                            Color = "Red",
                            Number = 17
                        },
                        new
                        {
                            WheelId = 18,
                            Color = "Black",
                            Number = 18
                        },
                        new
                        {
                            WheelId = 19,
                            Color = "Red",
                            Number = 19
                        },
                        new
                        {
                            WheelId = 20,
                            Color = "Red",
                            Number = 20
                        },
                        new
                        {
                            WheelId = 21,
                            Color = "Black",
                            Number = 21
                        },
                        new
                        {
                            WheelId = 22,
                            Color = "Red",
                            Number = 22
                        },
                        new
                        {
                            WheelId = 23,
                            Color = "Black",
                            Number = 23
                        },
                        new
                        {
                            WheelId = 24,
                            Color = "Red",
                            Number = 24
                        },
                        new
                        {
                            WheelId = 25,
                            Color = "Black",
                            Number = 25
                        },
                        new
                        {
                            WheelId = 26,
                            Color = "Red",
                            Number = 26
                        },
                        new
                        {
                            WheelId = 27,
                            Color = "Black",
                            Number = 27
                        },
                        new
                        {
                            WheelId = 28,
                            Color = "Black",
                            Number = 28
                        },
                        new
                        {
                            WheelId = 29,
                            Color = "Red",
                            Number = 29
                        },
                        new
                        {
                            WheelId = 30,
                            Color = "Black",
                            Number = 30
                        },
                        new
                        {
                            WheelId = 31,
                            Color = "Red",
                            Number = 31
                        },
                        new
                        {
                            WheelId = 32,
                            Color = "Black",
                            Number = 32
                        },
                        new
                        {
                            WheelId = 33,
                            Color = "Red",
                            Number = 33
                        },
                        new
                        {
                            WheelId = 34,
                            Color = "Black",
                            Number = 34
                        },
                        new
                        {
                            WheelId = 35,
                            Color = "Red",
                            Number = 35
                        },
                        new
                        {
                            WheelId = 36,
                            Color = "Black",
                            Number = 36
                        },
                        new
                        {
                            WheelId = 37,
                            Color = "Green",
                            Number = 0
                        },
                        new
                        {
                            WheelId = 38,
                            Color = "Green",
                            Number = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RouletteAPI.Data.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RouletteAPI.Data.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteAPI.Data.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RouletteAPI.Data.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RouletteAPI.Data.Bet", b =>
                {
                    b.HasOne("RouletteAPI.Data.Table", null)
                        .WithMany("Bets")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteAPI.Data.TableSection", null)
                        .WithMany("Bets")
                        .HasForeignKey("TableSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RouletteAPI.Data.PayOut", b =>
                {
                    b.HasOne("RouletteAPI.Data.Bet", "Bet")
                        .WithMany("PayOuts")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("RouletteAPI.Data.Spin", b =>
                {
                    b.HasOne("RouletteAPI.Data.Bet", "Bet")
                        .WithMany()
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteAPI.Data.Wheel", "Wheel")
                        .WithMany("Spins")
                        .HasForeignKey("WheelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Wheel");
                });

            modelBuilder.Entity("RouletteAPI.Data.Bet", b =>
                {
                    b.Navigation("PayOuts");
                });

            modelBuilder.Entity("RouletteAPI.Data.Table", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("RouletteAPI.Data.TableSection", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("RouletteAPI.Data.Wheel", b =>
                {
                    b.Navigation("Spins");
                });
#pragma warning restore 612, 618
        }
    }
}
