// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RouletteAPI.Data;

namespace RouletteAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230112085602_DatabaseCreated")]
    partial class DatabaseCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RouletteAPI.Data.Bet", b =>
                {
                    b.Property<int>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("TableSectionId")
                        .HasColumnType("int");

                    b.HasKey("BetId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TableId");

                    b.HasIndex("TableSectionId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("RouletteAPI.Data.PayOut", b =>
                {
                    b.Property<int>("PayOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayOutDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PayOutId");

                    b.HasIndex("BetId");

                    b.ToTable("PayOuts");
                });

            modelBuilder.Entity("RouletteAPI.Data.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RouletteAPI.Data.Spin", b =>
                {
                    b.Property<int>("SpinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SpinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WheelId")
                        .HasColumnType("int");

                    b.HasKey("SpinId");

                    b.HasIndex("BetId");

                    b.HasIndex("WheelId");

                    b.ToTable("Spins");
                });

            modelBuilder.Entity("RouletteAPI.Data.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Polarity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("RouletteAPI.Data.TableSection", b =>
                {
                    b.Property<int>("TableSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableSectionId");

                    b.ToTable("TableSections");
                });

            modelBuilder.Entity("RouletteAPI.Data.Wheel", b =>
                {
                    b.Property<int>("WheelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("WheelId");

                    b.ToTable("Wheel");
                });

            modelBuilder.Entity("RouletteAPI.Data.Bet", b =>
                {
                    b.HasOne("RouletteAPI.Data.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteAPI.Data.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteAPI.Data.TableSection", "TableSection")
                        .WithMany()
                        .HasForeignKey("TableSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Table");

                    b.Navigation("TableSection");
                });

            modelBuilder.Entity("RouletteAPI.Data.PayOut", b =>
                {
                    b.HasOne("RouletteAPI.Data.Bet", "Bet")
                        .WithMany()
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("RouletteAPI.Data.Spin", b =>
                {
                    b.HasOne("RouletteAPI.Data.Bet", "Bet")
                        .WithMany()
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteAPI.Data.Wheel", "Wheel")
                        .WithMany()
                        .HasForeignKey("WheelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Wheel");
                });
#pragma warning restore 612, 618
        }
    }
}
